buildscript {
	repositories {
		maven { url 'https://repo1.maven.org/maven2/' }
		maven { url 'https://plugins.gradle.org/m2/' }
		maven { url 'https://repo.spring.io/plugins-release/' }
	}
	dependencies {
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
		classpath("org.springframework.build.gradle:spring-io-plugin:0.0.3.RELEASE")
		classpath('org.asciidoctor:asciidoctor-gradle-plugin:1.5.7')
		classpath("io.spring.gradle:docbook-reference-plugin:0.3.0")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
	}
}

configure(allprojects) {
	apply plugin: 'java'
	apply plugin: 'propdeps'

	group = 'org.springframework.security.kerberos'

	sourceCompatibility=1.7
	targetCompatibility=1.7

	[compileJava]*.options*.compilerArgs = ['-Xlint:none']

	test.systemProperty("java.awt.headless", "true")

	repositories {
		mavenCentral()
		maven { url 'https://repo.spring.io/libs-release' }
	}
}

configure(subprojects) { subproject ->
	apply from: "${rootProject.projectDir}/publish-maven.gradle"

	jar {
		manifest.attributes['Created-By'] = "${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})"
		manifest.attributes['Implementation-Title'] = subproject.name
		manifest.attributes['Implementation-Version'] = subproject.version

		from("${rootProject.projectDir}/src/dist") {
			include "license.txt"
			include "notice.txt"
			into "META-INF"
			expand(copyright: new Date().format('yyyy'), version: project.version)
		}
	}

	javadoc {
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
	}

	task sourcesJar(type: Jar, dependsOn:classes) {
		classifier = 'sources'
		from sourceSets.main.allJava.srcDirs
		include '**/*.java', '**/*.aj'
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	dependencies {
		testCompile "org.mockito:mockito-core:$mockitoVersion"
		testCompile "junit:junit:$junitVersion"
	}

}

project('spring-security-kerberos-core') {
	description = 'Spring Security Kerberos Core'
	dependencies {
		compile "org.springframework:spring-core:$springVersion"
		compile "org.springframework.security:spring-security-core:$springSecurityVersion"
	}
}

project('spring-security-kerberos-web') {
	description = 'Spring Security Kerberos Web'
	dependencies {
		compile project(":spring-security-kerberos-core")
		compile "org.springframework:spring-core:$springVersion"
		compile "org.springframework:spring-web:$springVersion"
		compile "org.springframework.security:spring-security-web:$springSecurityVersion"

		compile("javax.servlet:javax.servlet-api:$servletApi3Version", optional)

		testCompile "org.springframework.security:spring-security-config:$springSecurityVersion"
		testCompile "org.springframework:spring-test:$springVersion"
	}
}

project('spring-security-kerberos-client') {
	description = 'Spring Security Kerberos Client'

	configurations {
		all*.exclude group: "org.apache.directory.api", module: "api-ldap-schema-data"
	}

	dependencies {
		compile project(":spring-security-kerberos-core")
		compile "org.springframework:spring-web:$springVersion"
		compile "org.apache.httpcomponents:httpclient:$httpclientVersion"

		optional("org.springframework.security:spring-security-ldap:$springSecurityVersion")

		testCompile project(":spring-security-kerberos-web")
		testCompile "org.springframework.security:spring-security-config:$springSecurityVersion"
		testCompile "org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"
		testRuntime "org.apache.tomcat.embed:tomcat-embed-core:$tomcatEmbedVersion"
		testRuntime "org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatEmbedVersion"
		testRuntime "org.springframework:spring-webmvc:$springVersion"
	}
}

configure(rootProject) {
	description = 'Spring Security Kerberos Extension'

	apply plugin: 'org.asciidoctor.gradle.asciidoctor'
	apply plugin: 'docbook-reference'

	reference {
		sourceDir = new File(asciidoctor.outputDir , 'docbook5')
		pdfFilename = "spring-security-kerberos-reference.pdf"
		epubFilename = "spring-security-kerberos-reference.epub"
		expandPlaceholders = ""
	}

	afterEvaluate {
		tasks.findAll { it.name.startsWith("reference") }.each{ it.dependsOn.add("asciidoctor") }
	}

	asciidoctorj {
		version = '1.5.7'
	}

	// don't publish the default jar for the root project
	configurations.archives.artifacts.clear()

	task distZip(type: Zip) {
		group = 'Distribution'
		classifier = 'dist'
		description = "Builds -${classifier} archive, containing all jars and docs, " +
			"suitable for community download page."

		ext.baseDir = "${project.name}-${project.version}";

		from('src/dist') {
			include 'readme.txt'
			include 'license.txt'
			include 'notice.txt'
			into "${baseDir}"
			expand(copyright: new Date().format('yyyy'), version: project.version)
		}

		subprojects.each { subproject ->
			into ("${baseDir}/libs") {
				from subproject.jar
				if (subproject.tasks.findByPath('sourcesJar')) {
					from subproject.sourcesJar
				}
				if (subproject.tasks.findByPath('javadocJar')) {
					from subproject.javadocJar
				}
			}
		}
	}

	// Create an distribution that contains all dependencies (required and optional).
	// Not published by default; only for use when building from source.
	task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
		group = 'Distribution'
		classifier = 'dist-with-deps'
		description = "Builds -${classifier} archive, containing everything " +
			"in the -${distZip.classifier} archive plus all runtime dependencies."

		from zipTree(distZip.archivePath)

		gradle.taskGraph.whenReady { taskGraph ->
			if (taskGraph.hasTask(":${zipTask.name}")) {
				def projectNames = rootProject.subprojects*.name
				def artifacts = new HashSet()
				subprojects.each { subproject ->
					subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
						def dependency = artifact.moduleVersion.id
						if (!projectNames.contains(dependency.name)) {
							artifacts << artifact.file
						}
					}
				}

				zipTask.from(artifacts) {
					into "${distZip.baseDir}/deps"
				}
			}
		}
	}

	artifacts {
		archives distZip
	}

	task wrapper2(type: Wrapper) {
		description = 'Generates gradlew[.bat] scripts'
		gradleVersion = '5.6.4'
	}

}

